name: Continuous Integration

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

  workflow_dispatch:

env:
  VCPKG_COMMIT: "c82f74667287d3dc386bce81e44964370c91a289"

jobs:
  lint:
    if: github.ref != 'refs/heads/main' # skip on main build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install codespell
        run: pip3 install codespell

      - name: Install LLVM and Clang
        uses: ./.github/actions/install-clang
        with:
          version: "18"

      - name: Format Check
        run: cmake -D FORMAT_COMMAND=clang-format-18 -P cmake/lint.cmake

      - name: Dependency Setup Check
        run: python3 ./tools/check_install_packages_match.py

      - name: Spell check
        if: ${{ !cancelled() }}
        run: cmake -P cmake/spell.cmake

      - name: Test version bumped
        if: github.ref != 'refs/heads/main'
        run: echo "$(git diff HEAD origin/main -- CMakeLists.txt)" | grep VERSION -wq || (echo "version is not bumped. Please update it in ./CMakeLists.txt and commit the changes." && exit 1)

  check-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Readme
        run: python tools/embed_code.py -i --file ./README.md

      - name: Test that readme is up to date
        if: github.ref != 'refs/heads/main'
        run: git diff --exit-code HEAD -- README.md || (echo "README.md is not up to date. Please update it with tools/embed_code.py and commit the changes." && exit 1)

  sanitize:
    needs: lint
    if: ${{ !cancelled() && (needs.lint.result == 'success' || needs.lint.result == 'skipped') }} # Don't skip on main build, even though lint is skipped.

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: General Build Dependencies
        run: >-
          sudo apt-get update -q && sudo apt-get install ninja-build -y -q

      - name: Install LLVM and Clang
        uses: ./.github/actions/install-clang
        with:
          version: "18"

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: "${{ env.VCPKG_COMMIT }}"
          cache-version: "sanitize-clang-18"
          cache-restore-keys: |
            vcpkg-Linux-sanitize-clang-18-
            vcpkg-Linux-test-clang-18-

      - name: Configure
        run: |
          cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 4

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure --no-tests=error -j 2

  sonar:
    needs: lint
    if: ${{ !cancelled() && (needs.lint.result == 'success' || needs.lint.result == 'skipped') }} # Don't skip on main build, even though lint is skipped.

    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: General Build Dependencies
        run: >-
          sudo apt-get update -q && sudo apt-get install ninja-build -y -q

      - name: Install LLVM and Clang
        uses: ./.github/actions/install-clang
        with:
          version: "18"

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: "${{ env.VCPKG_COMMIT }}"
          cache-version: "sonar-clang-18"
          cache-restore-keys: |
            vcpkg-Linux-sonar-clang-18-
            vcpkg-Linux-test-clang-18-

      - name: Configure
        run: |
          cmake --preset=ci-coverage

      - name: Build with build-wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/coverage -j 4

      - name: Run include what you use check.
        run: ./tools/check_include_what_you_use.sh # if this fails you can run the script locally.

      - name: Test and code coverage
        run: cmake --build build/coverage -t ccov-all -j 4

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            --define sonar.cfamily.compile-commands=${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json

  vcpkg-build:
    needs: [lint]

    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: General Build Dependencies
        run: >-
          sudo apt-get update -q && sudo apt-get install ninja-build -y -q

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: "${{ env.VCPKG_COMMIT }}"
          cache-version: "vcpkg-build-clang-18"
          cache-restore-keys: |
            vcpkg-Linux-vcpkg-build-clang-18-
            vcpkg-Linux-test-clang-18-

      - name: Install LLVM and Clang
        uses: ./.github/actions/install-clang
        with:
          version: "18"

      - name: Configure
        run: |
          cmake --preset=ci-vcpkg

      - name: Build
        run: cmake --build build/ci-vcpkg -j 2

  test:
    needs: lint
    if: ${{ !cancelled() && (needs.lint.result == 'success' || needs.lint.result == 'skipped') }} # Don't skip on main build, even though lint is skipped.

    strategy:
      matrix:
        os:
          - "ubuntu-latest"
        compiler:
          - "gcc-11"
          - "gcc-13"
          - "clang-18"

        include:
          - os: "windows-2022"
            compiler: "msvc"
          # - os: "macos-14"
          #   compiler: "clang-15"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: General Build Dependencies
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install ninja-build -y -q

      - name: General Build Dependencies
        if: contains(matrix.os, 'macos')
        run: |
          brew install ninja

      - uses: ./.github/actions/install-gcc
        if: ${{ contains(matrix.compiler, 'gcc') && contains(matrix.os, 'ubuntu') }}
        with:
          version: ${{ matrix.compiler }}

      - uses: ./.github/actions/install-clang
        if: ${{ contains(matrix.compiler, 'clang') && contains(matrix.os, 'ubuntu') }}
        with:
          version: ${{ matrix.compiler }}

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: "${{ env.VCPKG_COMMIT }}"
          cache-version: "test-${{ contains(matrix.os, 'ubuntu') && 'Linux' || contains(matrix.os, 'macos') && 'macOS' || 'Windows' }}-${{ matrix.compiler }}"
          cache-restore-keys: |
            vcpkg-${{ contains(matrix.os, 'ubuntu') && 'Linux' || contains(matrix.os, 'macos') && 'macOS' || 'Windows' }}-test-${{ matrix.compiler }}-

      - name: Configure
        shell: pwsh
        run: |
          cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-${{ matrix.compiler }}"

      - name: Build
        run: cmake --build build --config Release -j 4

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure --no-tests=error -C Release -j 4

      - name: Benchmarks
        if: ${{ !contains(matrix.os, 'windows') }}
        run: ./build/benchmarks/bark_benchmarks --benchmark_display_aggregates_only=true

      - name: Benchmarks
        if: ${{ contains(matrix.os, 'windows') }}
        run: ./build/benchmarks/Release/bark_benchmarks --benchmark_display_aggregates_only=true
